# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from glider_msg/dvlmsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class dvlmsg(genpy.Message):
  _md5sum = "c18145d5becba32686a61649fd23cb97"
  _type = "glider_msg/dvlmsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
string errCode
int16[4] dataGood
float32[4] altitudeBeam
float32[4] bottomVelocityBeam
float32[4] waterVelocityBeam
float32[4] waterVelocityCredit
float32[3] velocityInst
int16 velocityInstFlag
float32[3] velocityEarth
int16 velocityEarthFlag
float32[3] waterVelocityInst
int16 waterVelocityInstFlag
float32[3] waterVelocityEarth
int16 waterVelocityEarthFlag
float32 roll
float32 pitch
float32 heading
float32 altitude
float32 temperature
float32 pressure
float32 salinity
float32 soundSpeed
string rawData
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','errCode','dataGood','altitudeBeam','bottomVelocityBeam','waterVelocityBeam','waterVelocityCredit','velocityInst','velocityInstFlag','velocityEarth','velocityEarthFlag','waterVelocityInst','waterVelocityInstFlag','waterVelocityEarth','waterVelocityEarthFlag','roll','pitch','heading','altitude','temperature','pressure','salinity','soundSpeed','rawData']
  _slot_types = ['std_msgs/Header','string','int16[4]','float32[4]','float32[4]','float32[4]','float32[4]','float32[3]','int16','float32[3]','int16','float32[3]','int16','float32[3]','int16','float32','float32','float32','float32','float32','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,errCode,dataGood,altitudeBeam,bottomVelocityBeam,waterVelocityBeam,waterVelocityCredit,velocityInst,velocityInstFlag,velocityEarth,velocityEarthFlag,waterVelocityInst,waterVelocityInstFlag,waterVelocityEarth,waterVelocityEarthFlag,roll,pitch,heading,altitude,temperature,pressure,salinity,soundSpeed,rawData

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dvlmsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.errCode is None:
        self.errCode = ''
      if self.dataGood is None:
        self.dataGood = [0] * 4
      if self.altitudeBeam is None:
        self.altitudeBeam = [0.] * 4
      if self.bottomVelocityBeam is None:
        self.bottomVelocityBeam = [0.] * 4
      if self.waterVelocityBeam is None:
        self.waterVelocityBeam = [0.] * 4
      if self.waterVelocityCredit is None:
        self.waterVelocityCredit = [0.] * 4
      if self.velocityInst is None:
        self.velocityInst = [0.] * 3
      if self.velocityInstFlag is None:
        self.velocityInstFlag = 0
      if self.velocityEarth is None:
        self.velocityEarth = [0.] * 3
      if self.velocityEarthFlag is None:
        self.velocityEarthFlag = 0
      if self.waterVelocityInst is None:
        self.waterVelocityInst = [0.] * 3
      if self.waterVelocityInstFlag is None:
        self.waterVelocityInstFlag = 0
      if self.waterVelocityEarth is None:
        self.waterVelocityEarth = [0.] * 3
      if self.waterVelocityEarthFlag is None:
        self.waterVelocityEarthFlag = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.heading is None:
        self.heading = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.pressure is None:
        self.pressure = 0.
      if self.salinity is None:
        self.salinity = 0.
      if self.soundSpeed is None:
        self.soundSpeed = 0.
      if self.rawData is None:
        self.rawData = ''
    else:
      self.header = std_msgs.msg.Header()
      self.errCode = ''
      self.dataGood = [0] * 4
      self.altitudeBeam = [0.] * 4
      self.bottomVelocityBeam = [0.] * 4
      self.waterVelocityBeam = [0.] * 4
      self.waterVelocityCredit = [0.] * 4
      self.velocityInst = [0.] * 3
      self.velocityInstFlag = 0
      self.velocityEarth = [0.] * 3
      self.velocityEarthFlag = 0
      self.waterVelocityInst = [0.] * 3
      self.waterVelocityInstFlag = 0
      self.waterVelocityEarth = [0.] * 3
      self.waterVelocityEarthFlag = 0
      self.roll = 0.
      self.pitch = 0.
      self.heading = 0.
      self.altitude = 0.
      self.temperature = 0.
      self.pressure = 0.
      self.salinity = 0.
      self.soundSpeed = 0.
      self.rawData = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.errCode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_4h().pack(*self.dataGood))
      buff.write(_get_struct_4f().pack(*self.altitudeBeam))
      buff.write(_get_struct_4f().pack(*self.bottomVelocityBeam))
      buff.write(_get_struct_4f().pack(*self.waterVelocityBeam))
      buff.write(_get_struct_4f().pack(*self.waterVelocityCredit))
      buff.write(_get_struct_3f().pack(*self.velocityInst))
      _x = self.velocityInstFlag
      buff.write(_get_struct_h().pack(_x))
      buff.write(_get_struct_3f().pack(*self.velocityEarth))
      _x = self.velocityEarthFlag
      buff.write(_get_struct_h().pack(_x))
      buff.write(_get_struct_3f().pack(*self.waterVelocityInst))
      _x = self.waterVelocityInstFlag
      buff.write(_get_struct_h().pack(_x))
      buff.write(_get_struct_3f().pack(*self.waterVelocityEarth))
      _x = self
      buff.write(_get_struct_h8f().pack(_x.waterVelocityEarthFlag, _x.roll, _x.pitch, _x.heading, _x.altitude, _x.temperature, _x.pressure, _x.salinity, _x.soundSpeed))
      _x = self.rawData
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errCode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.errCode = str[start:end]
      start = end
      end += 8
      self.dataGood = _get_struct_4h().unpack(str[start:end])
      start = end
      end += 16
      self.altitudeBeam = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.bottomVelocityBeam = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.waterVelocityBeam = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.waterVelocityCredit = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.velocityInst = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 2
      (self.velocityInstFlag,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 12
      self.velocityEarth = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 2
      (self.velocityEarthFlag,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 12
      self.waterVelocityInst = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 2
      (self.waterVelocityInstFlag,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 12
      self.waterVelocityEarth = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 34
      (_x.waterVelocityEarthFlag, _x.roll, _x.pitch, _x.heading, _x.altitude, _x.temperature, _x.pressure, _x.salinity, _x.soundSpeed,) = _get_struct_h8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rawData = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rawData = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.errCode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.dataGood.tostring())
      buff.write(self.altitudeBeam.tostring())
      buff.write(self.bottomVelocityBeam.tostring())
      buff.write(self.waterVelocityBeam.tostring())
      buff.write(self.waterVelocityCredit.tostring())
      buff.write(self.velocityInst.tostring())
      _x = self.velocityInstFlag
      buff.write(_get_struct_h().pack(_x))
      buff.write(self.velocityEarth.tostring())
      _x = self.velocityEarthFlag
      buff.write(_get_struct_h().pack(_x))
      buff.write(self.waterVelocityInst.tostring())
      _x = self.waterVelocityInstFlag
      buff.write(_get_struct_h().pack(_x))
      buff.write(self.waterVelocityEarth.tostring())
      _x = self
      buff.write(_get_struct_h8f().pack(_x.waterVelocityEarthFlag, _x.roll, _x.pitch, _x.heading, _x.altitude, _x.temperature, _x.pressure, _x.salinity, _x.soundSpeed))
      _x = self.rawData
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errCode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.errCode = str[start:end]
      start = end
      end += 8
      self.dataGood = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      start = end
      end += 16
      self.altitudeBeam = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.bottomVelocityBeam = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.waterVelocityBeam = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.waterVelocityCredit = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.velocityInst = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 2
      (self.velocityInstFlag,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 12
      self.velocityEarth = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 2
      (self.velocityEarthFlag,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 12
      self.waterVelocityInst = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 2
      (self.waterVelocityInstFlag,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 12
      self.waterVelocityEarth = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 34
      (_x.waterVelocityEarthFlag, _x.roll, _x.pitch, _x.heading, _x.altitude, _x.temperature, _x.pressure, _x.salinity, _x.soundSpeed,) = _get_struct_h8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rawData = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rawData = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4h = None
def _get_struct_4h():
    global _struct_4h
    if _struct_4h is None:
        _struct_4h = struct.Struct("<4h")
    return _struct_4h
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_h8f = None
def _get_struct_h8f():
    global _struct_h8f
    if _struct_h8f is None:
        _struct_h8f = struct.Struct("<h8f")
    return _struct_h8f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from glider_msg/imumsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class imumsg(genpy.Message):
  _md5sum = "d2f0d176490184beac4b63cba6827925"
  _type = "glider_msg/imumsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int16 gpsStatus
float32 latitude
float32 longitude
float32 altitude
float32 linearX
float32 linearY
float32 linearZ
float32 angularX
float32 angularY
float32 angularZ
float32 orientationX
float32 orientationY
float32 orientationZ
float32 orientationW
float32 angularVeloX
float32 angularVeloY
float32 angularVeloZ
float32 linearAccelerationX
float32 linearAccelerationY
float32 linearAccelerationZ
float64[9] position_covariance
float64[9] orientationCovariance
float64[9] linearAccelerationCovariance
float32[3] RPY
string systemStatusMessage
int16 statusLevel
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','gpsStatus','latitude','longitude','altitude','linearX','linearY','linearZ','angularX','angularY','angularZ','orientationX','orientationY','orientationZ','orientationW','angularVeloX','angularVeloY','angularVeloZ','linearAccelerationX','linearAccelerationY','linearAccelerationZ','position_covariance','orientationCovariance','linearAccelerationCovariance','RPY','systemStatusMessage','statusLevel']
  _slot_types = ['std_msgs/Header','int16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float64[9]','float64[9]','float64[9]','float32[3]','string','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,gpsStatus,latitude,longitude,altitude,linearX,linearY,linearZ,angularX,angularY,angularZ,orientationX,orientationY,orientationZ,orientationW,angularVeloX,angularVeloY,angularVeloZ,linearAccelerationX,linearAccelerationY,linearAccelerationZ,position_covariance,orientationCovariance,linearAccelerationCovariance,RPY,systemStatusMessage,statusLevel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imumsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpsStatus is None:
        self.gpsStatus = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.linearX is None:
        self.linearX = 0.
      if self.linearY is None:
        self.linearY = 0.
      if self.linearZ is None:
        self.linearZ = 0.
      if self.angularX is None:
        self.angularX = 0.
      if self.angularY is None:
        self.angularY = 0.
      if self.angularZ is None:
        self.angularZ = 0.
      if self.orientationX is None:
        self.orientationX = 0.
      if self.orientationY is None:
        self.orientationY = 0.
      if self.orientationZ is None:
        self.orientationZ = 0.
      if self.orientationW is None:
        self.orientationW = 0.
      if self.angularVeloX is None:
        self.angularVeloX = 0.
      if self.angularVeloY is None:
        self.angularVeloY = 0.
      if self.angularVeloZ is None:
        self.angularVeloZ = 0.
      if self.linearAccelerationX is None:
        self.linearAccelerationX = 0.
      if self.linearAccelerationY is None:
        self.linearAccelerationY = 0.
      if self.linearAccelerationZ is None:
        self.linearAccelerationZ = 0.
      if self.position_covariance is None:
        self.position_covariance = [0.] * 9
      if self.orientationCovariance is None:
        self.orientationCovariance = [0.] * 9
      if self.linearAccelerationCovariance is None:
        self.linearAccelerationCovariance = [0.] * 9
      if self.RPY is None:
        self.RPY = [0.] * 3
      if self.systemStatusMessage is None:
        self.systemStatusMessage = ''
      if self.statusLevel is None:
        self.statusLevel = 0
    else:
      self.header = std_msgs.msg.Header()
      self.gpsStatus = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.linearX = 0.
      self.linearY = 0.
      self.linearZ = 0.
      self.angularX = 0.
      self.angularY = 0.
      self.angularZ = 0.
      self.orientationX = 0.
      self.orientationY = 0.
      self.orientationZ = 0.
      self.orientationW = 0.
      self.angularVeloX = 0.
      self.angularVeloY = 0.
      self.angularVeloZ = 0.
      self.linearAccelerationX = 0.
      self.linearAccelerationY = 0.
      self.linearAccelerationZ = 0.
      self.position_covariance = [0.] * 9
      self.orientationCovariance = [0.] * 9
      self.linearAccelerationCovariance = [0.] * 9
      self.RPY = [0.] * 3
      self.systemStatusMessage = ''
      self.statusLevel = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_h19f().pack(_x.gpsStatus, _x.latitude, _x.longitude, _x.altitude, _x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.orientationX, _x.orientationY, _x.orientationZ, _x.orientationW, _x.angularVeloX, _x.angularVeloY, _x.angularVeloZ, _x.linearAccelerationX, _x.linearAccelerationY, _x.linearAccelerationZ))
      buff.write(_get_struct_9d().pack(*self.position_covariance))
      buff.write(_get_struct_9d().pack(*self.orientationCovariance))
      buff.write(_get_struct_9d().pack(*self.linearAccelerationCovariance))
      buff.write(_get_struct_3f().pack(*self.RPY))
      _x = self.systemStatusMessage
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.statusLevel
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.gpsStatus, _x.latitude, _x.longitude, _x.altitude, _x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.orientationX, _x.orientationY, _x.orientationZ, _x.orientationW, _x.angularVeloX, _x.angularVeloY, _x.angularVeloZ, _x.linearAccelerationX, _x.linearAccelerationY, _x.linearAccelerationZ,) = _get_struct_h19f().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.orientationCovariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.linearAccelerationCovariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 12
      self.RPY = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.systemStatusMessage = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.systemStatusMessage = str[start:end]
      start = end
      end += 2
      (self.statusLevel,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_h19f().pack(_x.gpsStatus, _x.latitude, _x.longitude, _x.altitude, _x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.orientationX, _x.orientationY, _x.orientationZ, _x.orientationW, _x.angularVeloX, _x.angularVeloY, _x.angularVeloZ, _x.linearAccelerationX, _x.linearAccelerationY, _x.linearAccelerationZ))
      buff.write(self.position_covariance.tostring())
      buff.write(self.orientationCovariance.tostring())
      buff.write(self.linearAccelerationCovariance.tostring())
      buff.write(self.RPY.tostring())
      _x = self.systemStatusMessage
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.statusLevel
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.gpsStatus, _x.latitude, _x.longitude, _x.altitude, _x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.orientationX, _x.orientationY, _x.orientationZ, _x.orientationW, _x.angularVeloX, _x.angularVeloY, _x.angularVeloZ, _x.linearAccelerationX, _x.linearAccelerationY, _x.linearAccelerationZ,) = _get_struct_h19f().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.orientationCovariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.linearAccelerationCovariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 12
      self.RPY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.systemStatusMessage = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.systemStatusMessage = str[start:end]
      start = end
      end += 2
      (self.statusLevel,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_h19f = None
def _get_struct_h19f():
    global _struct_h19f
    if _struct_h19f is None:
        _struct_h19f = struct.Struct("<h19f")
    return _struct_h19f

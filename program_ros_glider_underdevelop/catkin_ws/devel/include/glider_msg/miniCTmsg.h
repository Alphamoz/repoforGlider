// Generated by gencpp from file glider_msg/miniCTmsg.msg
// DO NOT EDIT!


#ifndef GLIDER_MSG_MESSAGE_MINICTMSG_H
#define GLIDER_MSG_MESSAGE_MINICTMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace glider_msg
{
template <class ContainerAllocator>
struct miniCTmsg_
{
  typedef miniCTmsg_<ContainerAllocator> Type;

  miniCTmsg_()
    : temperature(0.0)
    , conductivity(0.0)  {
    }
  miniCTmsg_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , conductivity(0.0)  {
  (void)_alloc;
    }



   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _conductivity_type;
  _conductivity_type conductivity;





  typedef boost::shared_ptr< ::glider_msg::miniCTmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::glider_msg::miniCTmsg_<ContainerAllocator> const> ConstPtr;

}; // struct miniCTmsg_

typedef ::glider_msg::miniCTmsg_<std::allocator<void> > miniCTmsg;

typedef boost::shared_ptr< ::glider_msg::miniCTmsg > miniCTmsgPtr;
typedef boost::shared_ptr< ::glider_msg::miniCTmsg const> miniCTmsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::glider_msg::miniCTmsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::glider_msg::miniCTmsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::glider_msg::miniCTmsg_<ContainerAllocator1> & lhs, const ::glider_msg::miniCTmsg_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.conductivity == rhs.conductivity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::glider_msg::miniCTmsg_<ContainerAllocator1> & lhs, const ::glider_msg::miniCTmsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace glider_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::glider_msg::miniCTmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::glider_msg::miniCTmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::glider_msg::miniCTmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::glider_msg::miniCTmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::glider_msg::miniCTmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::glider_msg::miniCTmsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::glider_msg::miniCTmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6f0344464bd3a01fae94a0f61d3ba94";
  }

  static const char* value(const ::glider_msg::miniCTmsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6f0344464bd3a01ULL;
  static const uint64_t static_value2 = 0xfae94a0f61d3ba94ULL;
};

template<class ContainerAllocator>
struct DataType< ::glider_msg::miniCTmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "glider_msg/miniCTmsg";
  }

  static const char* value(const ::glider_msg::miniCTmsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::glider_msg::miniCTmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 temperature\n"
"float32 conductivity\n"
;
  }

  static const char* value(const ::glider_msg::miniCTmsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::glider_msg::miniCTmsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.conductivity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct miniCTmsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::glider_msg::miniCTmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::glider_msg::miniCTmsg_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "conductivity: ";
    Printer<float>::stream(s, indent + "  ", v.conductivity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLIDER_MSG_MESSAGE_MINICTMSG_H

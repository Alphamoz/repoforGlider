// Generated by gencpp from file glider_msg/altimsg.msg
// DO NOT EDIT!


#ifndef GLIDER_MSG_MESSAGE_ALTIMSG_H
#define GLIDER_MSG_MESSAGE_ALTIMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace glider_msg
{
template <class ContainerAllocator>
struct altimsg_
{
  typedef altimsg_<ContainerAllocator> Type;

  altimsg_()
    : range(0.0)
    , depth(0.0)
    , minRange(0.0)
    , maxRange(0.0)  {
    }
  altimsg_(const ContainerAllocator& _alloc)
    : range(0.0)
    , depth(0.0)
    , minRange(0.0)
    , maxRange(0.0)  {
  (void)_alloc;
    }



   typedef float _range_type;
  _range_type range;

   typedef float _depth_type;
  _depth_type depth;

   typedef float _minRange_type;
  _minRange_type minRange;

   typedef float _maxRange_type;
  _maxRange_type maxRange;





  typedef boost::shared_ptr< ::glider_msg::altimsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::glider_msg::altimsg_<ContainerAllocator> const> ConstPtr;

}; // struct altimsg_

typedef ::glider_msg::altimsg_<std::allocator<void> > altimsg;

typedef boost::shared_ptr< ::glider_msg::altimsg > altimsgPtr;
typedef boost::shared_ptr< ::glider_msg::altimsg const> altimsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::glider_msg::altimsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::glider_msg::altimsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::glider_msg::altimsg_<ContainerAllocator1> & lhs, const ::glider_msg::altimsg_<ContainerAllocator2> & rhs)
{
  return lhs.range == rhs.range &&
    lhs.depth == rhs.depth &&
    lhs.minRange == rhs.minRange &&
    lhs.maxRange == rhs.maxRange;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::glider_msg::altimsg_<ContainerAllocator1> & lhs, const ::glider_msg::altimsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace glider_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::glider_msg::altimsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::glider_msg::altimsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::glider_msg::altimsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::glider_msg::altimsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::glider_msg::altimsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::glider_msg::altimsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::glider_msg::altimsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1a9f9d6caa5b73af43f68a831c5c9fe";
  }

  static const char* value(const ::glider_msg::altimsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1a9f9d6caa5b73aULL;
  static const uint64_t static_value2 = 0xf43f68a831c5c9feULL;
};

template<class ContainerAllocator>
struct DataType< ::glider_msg::altimsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "glider_msg/altimsg";
  }

  static const char* value(const ::glider_msg::altimsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::glider_msg::altimsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 range\n"
"float32 depth\n"
"float32 minRange\n"
"float32 maxRange\n"
;
  }

  static const char* value(const ::glider_msg::altimsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::glider_msg::altimsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range);
      stream.next(m.depth);
      stream.next(m.minRange);
      stream.next(m.maxRange);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct altimsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::glider_msg::altimsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::glider_msg::altimsg_<ContainerAllocator>& v)
  {
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "minRange: ";
    Printer<float>::stream(s, indent + "  ", v.minRange);
    s << indent << "maxRange: ";
    Printer<float>::stream(s, indent + "  ", v.maxRange);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLIDER_MSG_MESSAGE_ALTIMSG_H
